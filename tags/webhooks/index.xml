<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebHooks on SpaceBound</title>
    <link>https://spaceboundr.github.io/tags/webhooks/</link>
    <description>Recent content in WebHooks on SpaceBound</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 14 Apr 2019 12:23:00 +0800</lastBuildDate>
    
	<atom:link href="https://spaceboundr.github.io/tags/webhooks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用GitHub的WebHooks&#43;NodeJs实现生产环境代码自动更新</title>
      <link>https://spaceboundr.github.io/posts/automatic-production-environment-code-update-using-github-webhooks-and-nodejs/</link>
      <pubDate>Sun, 14 Apr 2019 12:23:00 +0800</pubDate>
      
      <guid>https://spaceboundr.github.io/posts/automatic-production-environment-code-update-using-github-webhooks-and-nodejs/</guid>
      <description>最近为博客申请了一个域名spacebound.xyz还在备案中，等备案完成就能通过域名访问本站，刚好手上有一台闲置的腾讯云服务器，就考虑将博客代码部署到服务器上。
服务器选择的是windows环境，.Net程序员后遗症+对Linux不熟 使用Nginx部署静态网站。按照传统的方式，在本地编辑、发布成静态资源以后还要远程桌面或者ftp/sftp上传至服务器，这样做太过麻烦，我想要更加自动化的方式实现。
经过一番资料查找后发现GitHub的WebHooks可以很方便的实现代码自动化管理，只要在GitHub相应库中设置好WebHooks，服务端使用NodeJs来构Webhook服务，就可以轻松的实现提交git时服务器自动更新代码完成部署。
具体实现如下：
GitHub的WebHooks设置 打开你要进行自动化部署的项目的GiHub仓库地址，进入Settings设置页面，点击左侧的Webhooks
点击Add webhook，添加一个webhook Payload URL 填写你项目的域名或服务器IP地址加端口号，例如： https：www.spacebound.xyz:6666
Content type 选择application/json
Secret webhook请求时在head中附加的密钥，之后会使用到需记住。例如： test6666
服务端使用NodeJs构建WebHook服务 创建NodeJs服务 服务器需要安装NodeJs，然后执行命令
npm install http-server -g npm install github-webhook-handler -g  来安装http-server和github-webhook-handler中间件，在项目根目录下新建webhook.js
var http = require(&#39;http&#39;) var createHandler = require(&#39;github-webhook-handler&#39;) var handler = createHandler({ path: &#39;/&#39;, secret: &#39;test6666&#39; }) // 上面的 secret 保持和 GitHub 后台设置的一致 http.createServer(function (req, res) { handler(req, res, function (err) { res.statusCode = 404 res.end(&#39;no such location&#39;) }) }).</description>
    </item>
    
  </channel>
</rss>