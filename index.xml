<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SpaceBound on SpaceBound</title>
    <link>https://www.spacebound.xyz/</link>
    <description>Recent content in SpaceBound on SpaceBound</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Aug 2019 02:09:00 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>【声影】Abigail - Happy Days</title>
      <link>https://www.spacebound.xyz/posts/abigail-happy-days/</link>
      <pubDate>Thu, 22 Aug 2019 02:09:00 +0800</pubDate>
      
      <guid>https://www.spacebound.xyz/posts/abigail-happy-days/</guid>
      <description>

&lt;h2 id=&#34;abigail&#34;&gt;Abigail&lt;/h2&gt;

&lt;iframe frameborder=&#34;no&#34; border=&#34;0&#34; marginwidth=&#34;0&#34; marginheight=&#34;0&#34; width=330 height=86 src=&#34;//music.163.com/outchain/player?type=2&amp;id=4108741&amp;auto=0&amp;height=66&#34;&gt;&lt;/iframe&gt;

&lt;h3 id=&#34;偷心-closer-2004&#34;&gt;偷心 Closer (2004)&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190822/p1457195667.jpg&#34;&gt;&lt;br /&gt;
四个男女之间的反复关系，在爱情里追逐和厌倦。丹（裘德·洛 Jude Law 饰）是作家，他爱上了舞女爱丽丝（娜塔丽·波特曼 Natalie Portman 饰）。丹对爱丽丝炽热燃烧的爱情给了他灵感和激情，但厌倦也随之而来，他内心在寻找另一个人的爱，终于他遇上了摄影师安娜 （朱莉娅·罗伯茨 Julia Roberts 饰）。&lt;br /&gt;
安娜和另一个年轻人拉里（克里夫·欧文 Clive Owen饰），在爱的游戏里相互试探和接近。但是丹的进攻也让她动了情。讽刺的是，安娜的情人拉里，也和爱丽丝有了瓜葛。&lt;br /&gt;
于是，躺在他们身边的人，未必是他们心里想念的那人。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I don&amp;rsquo;t love you anymore.&lt;br /&gt;
Since when?&lt;br /&gt;
Now. Just now. I don‘t want to lie.&lt;br /&gt;
Can&amp;rsquo;t tell the truth, so it&amp;rsquo;s over.&lt;br /&gt;
It doesn&amp;rsquo;t matter. I love you. None of it matters.&lt;br /&gt;
Too late. I don&amp;rsquo;t love you anymore. Goodbye.&lt;br /&gt;
Here&amp;rsquo;s the truth, so now you can hate me.&lt;br /&gt;
Larry fucked me all night.&lt;br /&gt;
I enjoyed it. I came.&lt;br /&gt;
I prefer you. Now go.&lt;br /&gt;
I knew that. He told me.&lt;br /&gt;
You knew?&lt;br /&gt;
I needed to hear it from you.&lt;br /&gt;
Why?&lt;br /&gt;
Because he might have been lying. I had to hear it from you.&lt;br /&gt;
I would never have told you,&lt;br /&gt;
Because I know you would have never forgived me.&lt;br /&gt;
I would. I have.&lt;br /&gt;
Why did he tell you?&lt;br /&gt;
Because he&amp;rsquo;s a bastard.&lt;br /&gt;
How could he?&lt;br /&gt;
Because he wanted this to happen.&lt;br /&gt;
But why test me?&lt;br /&gt;
Because I&amp;rsquo;m an idiot.&lt;br /&gt;
Yes. I would have loved you&amp;hellip; forever. Now, please go.&lt;br /&gt;
Don&amp;rsquo;t do this, Alice. Please, talk to me.&lt;br /&gt;
I am talking. fuck off.&lt;br /&gt;
I&amp;rsquo;m sorry. You misunderstand! I didn&amp;rsquo;t mean to.&lt;br /&gt;
Yes you did.&lt;br /&gt;
I love you!&lt;br /&gt;
Where?&lt;br /&gt;
What?&lt;br /&gt;
Show me! Where is this love?&lt;br /&gt;
I&amp;hellip; I can&amp;rsquo;t see it, I can&amp;rsquo;t touch it.&lt;br /&gt;
I can&amp;rsquo;t feel it. I can hear it. I can hear some words,&lt;br /&gt;
But I can&amp;rsquo;t do anything with your easy words.&lt;br /&gt;
Whatever you say is too late.&lt;br /&gt;
Please, don&amp;rsquo;t do this!&lt;br /&gt;
Done.&lt;br /&gt;
Now, please go, or I&amp;rsquo;ll call security.&lt;br /&gt;
No, you&amp;rsquo;re not in a strip club, there is no security.&lt;br /&gt;
Why did you fuck him?&lt;br /&gt;
I wanted to.&lt;br /&gt;
Why?!&lt;br /&gt;
I desired him.&lt;br /&gt;
Why?!&lt;br /&gt;
You weren&amp;rsquo;t there!&lt;br /&gt;
Why him?!&lt;br /&gt;
He asked me nicely.&lt;br /&gt;
You&amp;rsquo;re a liar.&lt;br /&gt;
So?&lt;br /&gt;
Who are you?&lt;br /&gt;
I&amp;rsquo;m no one!&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>使用GitHub的WebHooks&#43;NodeJs实现生产环境代码自动更新</title>
      <link>https://www.spacebound.xyz/posts/automatic-production-environment-code-update-using-github-webhooks-and-nodejs/</link>
      <pubDate>Sun, 14 Apr 2019 12:23:00 +0800</pubDate>
      
      <guid>https://www.spacebound.xyz/posts/automatic-production-environment-code-update-using-github-webhooks-and-nodejs/</guid>
      <description>

&lt;p&gt;最近为博客申请了一个域名&lt;a href=&#34;https://www.spacebound.xyz&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;spacebound.xyz&lt;/a&gt;还在备案中，等备案完成就能通过域名访问本站，刚好手上有一台闲置的腾讯云服务器，就考虑将博客代码部署到服务器上。&lt;br /&gt;
服务器选择的是windows环境，&lt;del&gt;.Net程序员后遗症+对Linux不熟&lt;/del&gt; 使用&lt;code&gt;Nginx&lt;/code&gt;部署静态网站。按照传统的方式，在本地编辑、发布成静态资源以后还要远程桌面或者ftp/sftp上传至服务器，这样做太过麻烦，我想要更加自动化的方式实现。&lt;br /&gt;
经过一番资料查找后发现&lt;a href=&#34;https://developer.github.com/webhooks/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;GitHub的&lt;code&gt;WebHooks&lt;/code&gt;&lt;/a&gt;可以很方便的实现代码自动化管理，只要在GitHub相应库中设置好WebHooks，服务端使用&lt;code&gt;NodeJs&lt;/code&gt;来构Webhook服务，就可以轻松的实现&lt;strong&gt;提交git时服务器自动更新代码完成部署&lt;/strong&gt;。&lt;br /&gt;
具体实现如下：&lt;/p&gt;

&lt;h2 id=&#34;github的webhooks设置&#34;&gt;GitHub的WebHooks设置&lt;/h2&gt;

&lt;p&gt;打开你要进行自动化部署的项目的GiHub仓库地址，进入Settings设置页面，点击左侧的Webhooks&lt;br /&gt;
&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190414/2019041401.png&#34;&gt;
点击Add webhook，添加一个webhook
&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190414/2019041402.png&#34;&gt;
&lt;code&gt;Payload URL&lt;/code&gt; 填写你项目的域名或服务器IP地址加端口号，例如： &lt;strong&gt;https：www.spacebound.xyz:6666&lt;/strong&gt;&lt;br /&gt;
&lt;code&gt;Content type&lt;/code&gt; 选择application/json&lt;br /&gt;
&lt;code&gt;Secret&lt;/code&gt; webhook请求时在head中附加的密钥，之后会使用到&lt;strong&gt;需记住&lt;/strong&gt;。例如： &lt;strong&gt;test6666&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&#34;服务端使用nodejs构建webhook服务&#34;&gt;服务端使用NodeJs构建WebHook服务&lt;/h2&gt;

&lt;h3 id=&#34;创建nodejs服务&#34;&gt;创建NodeJs服务&lt;/h3&gt;

&lt;p&gt;服务器需要安装&lt;code&gt;NodeJs&lt;/code&gt;，然后执行命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-npm&#34;&gt;npm install http-server -g
npm install github-webhook-handler -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;来安装http-server和github-webhook-handler中间件，在项目根目录下新建&lt;code&gt;webhook.js&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nodejs&#34;&gt;var http = require(&#39;http&#39;)
var createHandler = require(&#39;github-webhook-handler&#39;)
var handler = createHandler({ path: &#39;/&#39;, secret: &#39;test6666&#39; })
// 上面的 secret 保持和 GitHub 后台设置的一致
http.createServer(function (req, res) {
  handler(req, res, function (err) {
    res.statusCode = 404
    res.end(&#39;no such location&#39;)
  })
}).listen(6666)
//监听6666端口
handler.on(&#39;error&#39;, function (err) {
  console.error(&#39;Error:&#39;, err.message)
})
handler.on(&#39;push&#39;, function (event) {
  console.log(&#39;Received a push event for %s to %s&#39;,
    event.payload.repository.name,
    event.payload.ref);
	
  const spawn = require(&#39;child_process&#39;).spawn;
    //const cmd = &#39;git pull origin master&#39;;
    //const p = spawn(cmd, [], {shell: true});
    const p = spawn(&#39;deploy.sh&#39;, [], {shell: true})

  p.stdout.on (&#39;data&#39;, (data) =&amp;gt; {
		console.log (data.toString ());
	});
})
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nodejs&#34;&gt;const spawn = require(&#39;child_process&#39;).spawn;
    //const cmd = &#39;git pull origin master&#39;;
    //const p = spawn(cmd, [], {shell: true});
    const p = spawn(&#39;deploy.sh&#39;, [], {shell: true})

  p.stdout.on (&#39;data&#39;, (data) =&amp;gt; {
		console.log (data.toString ());
	});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;br/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;这个部分是使用NodeJs的子进程&lt;a href=&#34;http://nodejs.cn/api/child_process.html#child_process_child_process_spawn_command_args_options&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt;来执行shell脚本。这个地方踩了很多坑，由于对NodeJs不是很熟只能现学现用，官方API虽然对这个方法参数名有详细注解，但对于实际参数怎么写没有提供示例。&lt;br /&gt;
百度上查到的教程和例子都千篇一律 &lt;del&gt;&lt;strong&gt;强烈吐槽百度&lt;/strong&gt;&lt;/del&gt;，只有介绍shell基础命令怎么使用，没有关于git命令和调用.sh文件的示例。最后还是在&lt;code&gt;stackoverflow&lt;/code&gt;上的相关问题中找到了&lt;a href=&#34;https://stackoverflow.com/questions/9777215/running-a-shell-command-from-node-js-without-buffering-output&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;答案&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;创建shell脚本&#34;&gt;创建Shell脚本&lt;/h3&gt;

&lt;p&gt;先在网站根目录创建Git文件控制，添加远程Git仓库地址&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash
git init
git remote add origin https://xxx.git 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后创建&lt;code&gt;deploy.sh&lt;/code&gt;，和&lt;code&gt;webhook.js&lt;/code&gt;处于同一目录下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash
echo &amp;quot;start deployment&amp;quot;
git pull origin master
git reset --hard master
echo &amp;quot;done&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;到这里就可以使用&lt;code&gt;nodejs webhook.js&lt;/code&gt;命令将服务启动。&lt;/p&gt;

&lt;h2 id=&#34;使用pm2进行进程守护&#34;&gt;使用pm2进行进程守护&lt;/h2&gt;

&lt;p&gt;PM2是node进程管理工具，可以利用它来简化很多node应用管理的繁琐任务，如性能监控、自动重启、负载均衡等，而且使用非常简单。&lt;a href=&#34;http://www.cnblogs.com/chyingp/p/pm2-documentation.html&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;引用&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;pm2安装&#34;&gt;pm2安装&lt;/h3&gt;

&lt;p&gt;执行命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-npm&#34;&gt;npm i pm2 -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-npm&#34;&gt;pm2 start webhook.js --watch -i 2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pm2在windows服务器下开启自动开启服务&#34;&gt;pm2在windows服务器下开启自动开启服务&lt;/h3&gt;

&lt;p&gt;在安装好pm2的基础上，执行命令安装pm2-windows-service和pm2-windows-startup中间件&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-nodejs&#34;&gt;npm install pm2-windows-service -g
npm install pm2-windows-startup -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;添加.pm2的系统环境变量&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;PM2_HOME=C:\Users\Administrator\.pm2(路径默认在当前用户下的.pm2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以管理员身份运行cmd,执行以下命令安装服务&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-npm&#34;&gt;pm2-service-install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;提示Perform environment setup?时选n，回车继续。此时PM2服务已安装成功并已启动，（如果没启动请自行到Windows服务处启动服务）名称为PM2&lt;br /&gt;
&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190414/pm2-20190414114939.png&#34;&gt;&lt;br /&gt;
打开cmd，移动到项目更目录下，执行命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-npm&#34;&gt;pm2 start webhook.js -n myBlog
pm2 save
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190414/PM2-20190414115636.png&#34;&gt;&lt;br /&gt;
&lt;code&gt;pm2 save&lt;/code&gt; 十分重要, 它保存当前pm2正在管理的NodeJS服务, 并在开机后恢复这些服务，保存路径为系统环境变量设置的PM2_HOME路径。
&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190414/pm2-20190414112729.png&#34;&gt;&lt;br /&gt;
重启服务器后输入命令查看pm2列表，发现myBlog服务已启动，至此，开机自动启动配置完成。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-npm&#34;&gt;pm2 list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190414/pm2-20190414120232.png&#34;&gt;&lt;br /&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;结束语：&lt;/strong&gt;该项&lt;code&gt;hook&lt;/code&gt;技术不仅适用于Github、Gitlab、Gitee等线在上仓库，也可以在自己搭建的git服务器实现，在实际的项目中使用可以达到生产环境代码自动部署的目的。动手过程中有什么不清楚的地方可以在文章下方留言或者微信联系我，共同讨论 ：)&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>使用Shell命令生成HuGo网站并提交至GitHub</title>
      <link>https://www.spacebound.xyz/posts/use-the-shell-command-to-automatically-publish-the-hugo-website-and-upload-it-to-github/</link>
      <pubDate>Sat, 13 Apr 2019 14:09:00 +0800</pubDate>
      
      <guid>https://www.spacebound.xyz/posts/use-the-shell-command-to-automatically-publish-the-hugo-website-and-upload-it-to-github/</guid>
      <description>&lt;p&gt;在blog目录新建一个deploy.sh文件，将生成和上传的命令写在文件里，每次写完文章，直接运行deploy.sh即可。&lt;br /&gt;
例如我的deploy.sh&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash
echo -e &amp;quot;\033[0;32mDeploying updates to GitHub...\033[0m&amp;quot;
#移动到public
cd public
#删除public中除了.git的其他内容
rm -rf `ls |egrep -v &#39;(.git)&#39;`
#移动到上一层，执行hugo命令生成静态网站
cd ..
hugo -t LeaveIt  
#将README.md文件移动到public中
cp README.md public
#移动到public
cd public
#执行git命令上传至github
git add .
msg=&amp;quot;rebuilding site `date`&amp;quot;
if [ $# -eq 1 ]
  then msg=&amp;quot;$1&amp;quot;
fi
git commit -m &amp;quot;$msg&amp;quot;
git push origin master
cd ..
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;deploy.sh &amp;quot;message&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>认真改变世界</title>
      <link>https://www.spacebound.xyz/posts/change-the-world-seriously/</link>
      <pubDate>Fri, 12 Apr 2019 13:15:00 +0800</pubDate>
      
      <guid>https://www.spacebound.xyz/posts/change-the-world-seriously/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190412/wx20190413003058.jpg&#34;&gt;&lt;/p&gt;

&lt;p&gt;&amp;ndash; 2018.4.21 于云南昆明M60创意园南域之声&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>使用Valine评论系统</title>
      <link>https://www.spacebound.xyz/posts/uses-the-valine-comment-system/</link>
      <pubDate>Sun, 31 Mar 2019 02:09:00 +0800</pubDate>
      
      <guid>https://www.spacebound.xyz/posts/uses-the-valine-comment-system/</guid>
      <description>&lt;p&gt;博客需要一个评论插件，网上搜索过后发现&lt;a href=&#34;https://valine.js.org/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Valine&lt;/a&gt;就是我想要的。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Valine - 一款快速、简洁且高效的无后端评论系统。&lt;br /&gt;
Valine 诞生于2017年8月7日，是一款基于Leancloud的快速、简洁且高效的无后端评论系统。&lt;br /&gt;
理论上支持但不限于静态博客，目前已有Hexo、Jekyll、Typecho、Hugo、Ghost 等博客程序在使用Valine。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Valine官网上有详细的使 用教程，只需要进行相应配置&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;注册Leancloud账户，创建应用，获取APP ID和APP Key&lt;/li&gt;
&lt;li&gt;将html和js代码插入博客相应位置
&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190331/TIM-20190331222611.png&#34;&gt;&lt;/li&gt;
&lt;li&gt;重新发布HuGo即可看到评论功能&lt;br /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;快来文章末尾评论吧！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello World</title>
      <link>https://www.spacebound.xyz/posts/hello-world/</link>
      <pubDate>Fri, 29 Mar 2019 02:09:00 +0800</pubDate>
      
      <guid>https://www.spacebound.xyz/posts/hello-world/</guid>
      <description>&lt;p&gt;Hello World！你好 世界！&lt;br /&gt;
在以往的日子里不知道写过多少个Hello World，这个博客对我来说也是一个新的开始，我会坚持把这个博客写下去，记录生活，分享知识。&lt;br /&gt;
我是召唤兽。&lt;br /&gt;
&amp;ndash;2019.03.29 02:09 于KM
&lt;img src=&#34;https://rxwblog-1252097820.cos.ap-guangzhou.myqcloud.com/blog/20190329/20190329020700.jpg&#34; width=&#34;450&#34; height=&#34;450&#34;&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://www.spacebound.xyz/about/</link>
      <pubDate>Thu, 28 Mar 2019 14:06:14 +0800</pubDate>
      
      <guid>https://www.spacebound.xyz/about/</guid>
      <description>

&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;90后&lt;/li&gt;
&lt;li&gt;职业：软件工程师 &lt;del&gt;正在由.Net转Java的程序猿&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;城市：春城&lt;/li&gt;
&lt;li&gt;LiveHoues爱好者&amp;amp;马拉松业余选手&amp;amp;精酿爱好者&amp;amp;健身萌新&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;

&lt;h3 id=&#34;博客是基于什么做的&#34;&gt;博客是基于什么做的？&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;博客基于&lt;a href=&#34;https://gohugo.io/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;HuGo&lt;/a&gt;制作，使用&lt;a href=&#34;https://github.com/liuzc/leaveit&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;Leaveit&lt;/a&gt;主题，快速，优雅，简洁。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;关于版权&#34;&gt;关于版权&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;本站博文采用知识共享&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;署名-非商业性使用 4.0 国际许可协&lt;/a&gt;进行许可。&lt;/li&gt;
&lt;li&gt;若未特别声明，您可以将本站文章用于非盈利目的，但请保留作者信息及文章原始链接。&lt;br /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;友情链接&#34;&gt;友情链接&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/SpaceBoundR/&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;自行添加&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&amp;hellip;&amp;hellip;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>